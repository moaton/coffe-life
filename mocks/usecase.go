// Code generated by MockGen. DO NOT EDIT.
// Source: ../../interfaces/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "coffe-life/internal/dto"
	interfaces "coffe-life/internal/interfaces"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecases is a mock of Usecases interface.
type MockUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockUsecasesMockRecorder
}

// MockUsecasesMockRecorder is the mock recorder for MockUsecases.
type MockUsecasesMockRecorder struct {
	mock *MockUsecases
}

// NewMockUsecases creates a new mock instance.
func NewMockUsecases(ctrl *gomock.Controller) *MockUsecases {
	mock := &MockUsecases{ctrl: ctrl}
	mock.recorder = &MockUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecases) EXPECT() *MockUsecasesMockRecorder {
	return m.recorder
}

// Admin mocks base method.
func (m *MockUsecases) Admin() interfaces.AdminUsecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Admin")
	ret0, _ := ret[0].(interfaces.AdminUsecase)
	return ret0
}

// Admin indicates an expected call of Admin.
func (mr *MockUsecasesMockRecorder) Admin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Admin", reflect.TypeOf((*MockUsecases)(nil).Admin))
}

// MockAdminUsecase is a mock of AdminUsecase interface.
type MockAdminUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUsecaseMockRecorder
}

// MockAdminUsecaseMockRecorder is the mock recorder for MockAdminUsecase.
type MockAdminUsecaseMockRecorder struct {
	mock *MockAdminUsecase
}

// NewMockAdminUsecase creates a new mock instance.
func NewMockAdminUsecase(ctrl *gomock.Controller) *MockAdminUsecase {
	mock := &MockAdminUsecase{ctrl: ctrl}
	mock.recorder = &MockAdminUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUsecase) EXPECT() *MockAdminUsecaseMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockAdminUsecase) CreateCategory(ctx context.Context, category dto.CategoryRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockAdminUsecaseMockRecorder) CreateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockAdminUsecase)(nil).CreateCategory), ctx, category)
}

// CreateFood mocks base method.
func (m *MockAdminUsecase) CreateFood(ctx context.Context, category dto.FoodRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFood", ctx, category)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFood indicates an expected call of CreateFood.
func (mr *MockAdminUsecaseMockRecorder) CreateFood(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFood", reflect.TypeOf((*MockAdminUsecase)(nil).CreateFood), ctx, category)
}

// DeleteCategory mocks base method.
func (m *MockAdminUsecase) DeleteCategory(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockAdminUsecaseMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockAdminUsecase)(nil).DeleteCategory), ctx, id)
}

// DeleteFood mocks base method.
func (m *MockAdminUsecase) DeleteFood(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFood", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFood indicates an expected call of DeleteFood.
func (mr *MockAdminUsecaseMockRecorder) DeleteFood(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFood", reflect.TypeOf((*MockAdminUsecase)(nil).DeleteFood), ctx, id)
}

// GetCategories mocks base method.
func (m *MockAdminUsecase) GetCategories(ctx context.Context) (dto.Categories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].(dto.Categories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockAdminUsecaseMockRecorder) GetCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockAdminUsecase)(nil).GetCategories), ctx)
}

// GetFoods mocks base method.
func (m *MockAdminUsecase) GetFoods(ctx context.Context) (dto.Foods, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoods", ctx)
	ret0, _ := ret[0].(dto.Foods)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoods indicates an expected call of GetFoods.
func (mr *MockAdminUsecaseMockRecorder) GetFoods(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoods", reflect.TypeOf((*MockAdminUsecase)(nil).GetFoods), ctx)
}

// Login mocks base method.
func (m *MockAdminUsecase) Login(ctx context.Context, category dto.LoginRequest) (*dto.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, category)
	ret0, _ := ret[0].(*dto.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAdminUsecaseMockRecorder) Login(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAdminUsecase)(nil).Login), ctx, category)
}

// UpdateCategory mocks base method.
func (m *MockAdminUsecase) UpdateCategory(ctx context.Context, id string, category dto.CategoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, id, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockAdminUsecaseMockRecorder) UpdateCategory(ctx, id, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockAdminUsecase)(nil).UpdateCategory), ctx, id, category)
}

// UpdateFood mocks base method.
func (m *MockAdminUsecase) UpdateFood(ctx context.Context, id string, category dto.FoodRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFood", ctx, id, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFood indicates an expected call of UpdateFood.
func (mr *MockAdminUsecaseMockRecorder) UpdateFood(ctx, id, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFood", reflect.TypeOf((*MockAdminUsecase)(nil).UpdateFood), ctx, id, category)
}
