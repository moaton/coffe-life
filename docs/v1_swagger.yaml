basePath: /api/v1
definitions:
  dto.AuthResponse:
    properties:
      token:
        type: string
    type: object
  dto.Category:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.CategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  dto.Composition:
    properties:
      name:
        type: string
      unit:
        type: string
      weight:
        type: integer
    type: object
  dto.CreateUserRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.Food:
    properties:
      category:
        type: string
      compositions:
        items:
          $ref: '#/definitions/dto.Composition'
        type: array
      description:
        type: string
      error_reason:
        type: string
      id:
        type: string
      is_new:
        type: boolean
      is_spicy:
        type: boolean
      name:
        type: string
      price:
        type: string
      type:
        type: string
    type: object
  dto.FoodRequest:
    properties:
      category:
        type: string
      composition:
        items:
          $ref: '#/definitions/dto.Composition'
        type: array
      description:
        type: string
      error_reason:
        type: string
      is_new:
        type: boolean
      is_spicy:
        type: boolean
      name:
        type: string
      price:
        type: string
      type:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        format: base64
        type: string
      username:
        type: string
    type: object
  dto.Response:
    properties:
      description:
        type: string
      errorCode:
        type: string
      meta:
        type: object
      payload:
        type: object
    type: object
  dto.UpdateUserRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    type: object
  dto.User:
    properties:
      first_name:
        type: string
      id:
        type: string
      is_first:
        type: boolean
      last_name:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: API for processing clients data
  title: Coffe-Life API
  version: "1.0"
paths:
  /admin/data/categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: categories
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/dto.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Get categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create category
      parameters:
      - description: Category
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: category
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Create category
      tags:
      - categories
  /admin/data/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: category
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Category
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: category
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - categories
  /admin/data/foods:
    get:
      consumes:
      - application/json
      description: Get all foods
      produces:
      - application/json
      responses:
        "200":
          description: foods
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/dto.Food'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Get foods
      tags:
      - foods
    post:
      consumes:
      - application/json
      description: Create food
      parameters:
      - description: Food
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.FoodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: food
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Create food
      tags:
      - foods
  /admin/data/foods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete food
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: food
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete food
      tags:
      - foods
    put:
      consumes:
      - application/json
      description: Update food
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Food
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.FoodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: food
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Update food
      tags:
      - foods
  /admin/login:
    post:
      description: Login
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      responses:
        "200":
          description: login
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  $ref: '#/definitions/dto.AuthResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Login
      tags:
      - auth
  /admin/user:
    get:
      description: Users
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: string
      - description: size
        in: query
        name: size
        type: string
      responses:
        "200":
          description: user
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/dto.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - user
    post:
      description: User
      parameters:
      - description: User request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      responses:
        "200":
          description: user
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Create user
      tags:
      - user
  /admin/user/{id}:
    get:
      description: User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: user
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  $ref: '#/definitions/dto.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - user
    put:
      description: User
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      responses:
        "200":
          description: user
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                payload:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
